name: check dependencies vulnerabilities

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  check-server-lib:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Server

    steps:
    - uses: actions/checkout@v3

    - name: Install Node.js 18.15.0
      uses: actions/setup-node@v3
      with:
        node-version: 18.15.0
      
    - name: Install dependencies
      run: npm ci

    - name: Install required modules
      run: npm install @actions/github

    - name: Audit dependencies
      id: audit
      run: |
        npm audit --audit-level=low
        npm audit --audit-level=moderate
        npm audit --audit-level=high
        npm audit --audit-level=critical

    # if no vulnerabilities found, write no vulnerabilities found in the comment area of the pull request and permitted to merge
    # else write the vulnerabilities found in the comment area of the pull request and unpermitted to merge
    - name: Comment on pull request
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          async function run() {
            const { context, github } = require('@actions/github');
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN)
            const { pull_request: pullRequest } = context.payload
            const { number: issue_number } = pullRequest
            const { data: comments } = await octokit.issues.listComments({
              ...context.repo,
              issue_number
            })
            const comment = comments.find(comment => comment.user.login === 'github-actions[bot]')
            if (comment) {
              await octokit.issues.updateComment({
                ...context.repo,
                comment_id: comment.id,
                body: 'Vulnérabilités trouvées'
              })
            } else {
              await octokit.issues.createComment({
                ...context.repo,
                issue_number,
                body: 'Aucune vulnérabilité trouvée'
              })
            }
          }
          run()


    # - name: Check vulnerabilities
    #   if: ${{ always() }}
    #   run: |
    #     if [ -s "audit.json" ]; then
    #       echo "Vulnerabilities found"
    #       echo "Unpermitted to merge"
    #       exit 1
    #     else
    #       echo "No vulnerabilities found"
    #       exit 0
    #     fi

      


      